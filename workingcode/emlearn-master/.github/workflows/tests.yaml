name: Python package

on: [push, pull_request]

jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -yqq libsndfile1 libsndfile1-dev
      - name: Install Python dependencies
        run: |
          python -m pip install -U 'pip<20'
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test in-tree code with pytest
        env:
          PYTHONPATH: ./:./build/lib.linux-x86_64-3.8
        run: |
          python setup.py build
          pytest -v --cov=emlearn --cov-report html --cov-report term-missing --cov-branch test/
      - name: Install as pip package
        env:
          CFLAGS: -Werror
        run: |
          pip install ./ -v
      - name: Test installed package
        run: |
          pytest -v test/

  docs:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -yqq libsndfile1 libsndfile1-dev doxygen
      - name: Install Python dependencies
        run: |
          python -m pip install -U 'pip<20'
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
      - name: Build package
        run: |
          python setup.py build
      - name: Build documentation using Sphinx
        working-directory: ./docs
        env:
          PYTHONPATH: ../:../build/lib.linux-x86_64-3.8
          READTHEDOCS: 'True'
        run: |
            make html

  test_arduino:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -yqq libsndfile1 libsndfile1-dev arduino arduino-core-avr

      - name: Install Arduino CLI
        run: |
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/bin sudo sh
          ./bin/arduino-cli core install arduino:avr

      - name: Install Python dependencies
        run: |
          python -m pip install -U 'pip<20'
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
      - name: Install package
        run: |
          python setup.py build
          pip install ./ -v
      - name: Run Arduino tests
        env:
          EMLEARN_TEST_ARDUINO: 1
        run: |
            PATH=/home/runner/work/emlearn/emlearn/bin:$PATH pytest -v test/ -k arduino

  test_zephyr:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -yqq libsndfile1 libsndfile1-dev
          sudo apt-get install --no-install-recommends git cmake ninja-build gperf \
            ccache dfu-util device-tree-compiler wget \
            python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \
            make gcc gcc-multilib g++-multilib libsdl2-dev libmagic1

      - name: Install Python dependencies
        run: |
          python -m pip install -U 'pip<20'
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements.dev.txt ]; then pip install -r requirements.dev.txt; fi
      - name: Install package
        run: |
          python setup.py build
          pip install ./ -v

      - name: Install Zephyr SDK
        env:
            ZEPHYR_SDK_VERSION: 0.16.5
            ZEPHYR_SDK_FILE: zephyr-sdk-0.16.5_linux-x86_64_minimal.tar.xz
        run: |
            wget https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/${ZEPHYR_SDK_FILE}
            tar -xf ${ZEPHYR_SDK_FILE}
            cd zephyr-sdk-${ZEPHYR_SDK_VERSION}
            ./setup.sh -c -h -t arm-zephyr-eabi

      - name: Install West
        run: |
            pip install west
            git clone https://github.com/zephyrproject-rtos/zephyr.git zephyr-git
            pip install -r zephyr-git/scripts/requirements.txt

      - name: Run Zephyr tests
        env:
          EMLEARN_TEST_ZEPHYR: 1
        run: |
            pytest -v test/ -k zephyr


  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: casperdcl/deploy-pypi@v2
        with:
          password: ${{ secrets.PYPI_TOKEN }}
          pip: install -r requirements.txt
          build: clean sdist -d dist/
          # only upload if a tag is pushed (otherwise just build & check)
          upload: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags') }}
